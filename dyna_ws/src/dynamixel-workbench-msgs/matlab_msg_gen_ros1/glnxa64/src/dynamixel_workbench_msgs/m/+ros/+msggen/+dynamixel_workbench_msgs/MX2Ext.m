
classdef MX2Ext < ros.Message
    %MX2Ext MATLAB implementation of dynamixel_workbench_msgs/MX2Ext
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'dynamixel_workbench_msgs/MX2Ext' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'e5260697f25a6834d84f685c2f474e33' % The MD5 Checksum of the message definition
        PropertyList = { 'ModelNumber' 'FirmwareVersion' 'ID' 'BaudRate' 'ReturnDelayTime' 'DriveMode' 'OperatingMode' 'SecondaryID' 'ProtocolVersion' 'HomingOffset' 'MovingThreshold' 'TemperatureLimit' 'MaxVoltageLimit' 'MinVoltageLimit' 'PWMLimit' 'CurrentLimit' 'AccelerationLimit' 'VelocityLimit' 'MaxPositionLimit' 'MinPositionLimit' 'Shutdown' 'TorqueEnable' 'LED' 'StatusReturnLevel' 'RegisteredInstruction' 'HardwareErrorStatus' 'VelocityIGain' 'VelocityPGain' 'PositionDGain' 'PositionIGain' 'PositionPGain' 'Feedforward2ndGain' 'Feedforward1stGain' 'BusWatchdog' 'GoalPWM' 'GoalCurrent' 'GoalVelocity' 'ProfileAcceleration' 'ProfileVelocity' 'GoalPosition' 'RealtimeTick' 'Moving' 'MovingStatus' 'PresentPWM' 'PresentCurrent' 'PresentVelocity' 'PresentPosition' 'VelocityTrajectory' 'PositionTrajectory' 'PresentInputVoltage' 'PresentTemperature' } % List of non-constant message properties
        ROSPropertyList = { 'Model_Number' 'Firmware_Version' 'ID' 'Baud_Rate' 'Return_Delay_Time' 'Drive_Mode' 'Operating_Mode' 'Secondary_ID' 'Protocol_Version' 'Homing_Offset' 'Moving_Threshold' 'Temperature_Limit' 'Max_Voltage_Limit' 'Min_Voltage_Limit' 'PWM_Limit' 'Current_Limit' 'Acceleration_Limit' 'Velocity_Limit' 'Max_Position_Limit' 'Min_Position_Limit' 'Shutdown' 'Torque_Enable' 'LED' 'Status_Return_Level' 'Registered_Instruction' 'Hardware_Error_Status' 'Velocity_I_Gain' 'Velocity_P_Gain' 'Position_D_Gain' 'Position_I_Gain' 'Position_P_Gain' 'Feedforward_2nd_Gain' 'Feedforward_1st_Gain' 'Bus_Watchdog' 'Goal_PWM' 'Goal_Current' 'Goal_Velocity' 'Profile_Acceleration' 'Profile_Velocity' 'Goal_Position' 'Realtime_Tick' 'Moving' 'Moving_Status' 'Present_PWM' 'Present_Current' 'Present_Velocity' 'Present_Position' 'Velocity_Trajectory' 'Position_Trajectory' 'Present_Input_Voltage' 'Present_Temperature' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        ModelNumber
        FirmwareVersion
        ID
        BaudRate
        ReturnDelayTime
        DriveMode
        OperatingMode
        SecondaryID
        ProtocolVersion
        HomingOffset
        MovingThreshold
        TemperatureLimit
        MaxVoltageLimit
        MinVoltageLimit
        PWMLimit
        CurrentLimit
        AccelerationLimit
        VelocityLimit
        MaxPositionLimit
        MinPositionLimit
        Shutdown
        TorqueEnable
        LED
        StatusReturnLevel
        RegisteredInstruction
        HardwareErrorStatus
        VelocityIGain
        VelocityPGain
        PositionDGain
        PositionIGain
        PositionPGain
        Feedforward2ndGain
        Feedforward1stGain
        BusWatchdog
        GoalPWM
        GoalCurrent
        GoalVelocity
        ProfileAcceleration
        ProfileVelocity
        GoalPosition
        RealtimeTick
        Moving
        MovingStatus
        PresentPWM
        PresentCurrent
        PresentVelocity
        PresentPosition
        VelocityTrajectory
        PositionTrajectory
        PresentInputVoltage
        PresentTemperature
    end
    methods
        function set.ModelNumber(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'ModelNumber');
            obj.ModelNumber = uint16(val);
        end
        function set.FirmwareVersion(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'FirmwareVersion');
            obj.FirmwareVersion = uint8(val);
        end
        function set.ID(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'ID');
            obj.ID = uint8(val);
        end
        function set.BaudRate(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'BaudRate');
            obj.BaudRate = uint8(val);
        end
        function set.ReturnDelayTime(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'ReturnDelayTime');
            obj.ReturnDelayTime = uint8(val);
        end
        function set.DriveMode(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'DriveMode');
            obj.DriveMode = uint8(val);
        end
        function set.OperatingMode(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'OperatingMode');
            obj.OperatingMode = uint8(val);
        end
        function set.SecondaryID(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'SecondaryID');
            obj.SecondaryID = uint8(val);
        end
        function set.ProtocolVersion(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'ProtocolVersion');
            obj.ProtocolVersion = uint8(val);
        end
        function set.HomingOffset(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'HomingOffset');
            obj.HomingOffset = int32(val);
        end
        function set.MovingThreshold(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'MovingThreshold');
            obj.MovingThreshold = uint32(val);
        end
        function set.TemperatureLimit(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'TemperatureLimit');
            obj.TemperatureLimit = uint8(val);
        end
        function set.MaxVoltageLimit(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'MaxVoltageLimit');
            obj.MaxVoltageLimit = uint16(val);
        end
        function set.MinVoltageLimit(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'MinVoltageLimit');
            obj.MinVoltageLimit = uint16(val);
        end
        function set.PWMLimit(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'PWMLimit');
            obj.PWMLimit = uint16(val);
        end
        function set.CurrentLimit(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'CurrentLimit');
            obj.CurrentLimit = uint16(val);
        end
        function set.AccelerationLimit(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'AccelerationLimit');
            obj.AccelerationLimit = uint32(val);
        end
        function set.VelocityLimit(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'VelocityLimit');
            obj.VelocityLimit = uint32(val);
        end
        function set.MaxPositionLimit(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'MaxPositionLimit');
            obj.MaxPositionLimit = uint32(val);
        end
        function set.MinPositionLimit(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'MinPositionLimit');
            obj.MinPositionLimit = uint32(val);
        end
        function set.Shutdown(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'Shutdown');
            obj.Shutdown = uint8(val);
        end
        function set.TorqueEnable(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'TorqueEnable');
            obj.TorqueEnable = uint8(val);
        end
        function set.LED(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'LED');
            obj.LED = uint8(val);
        end
        function set.StatusReturnLevel(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'StatusReturnLevel');
            obj.StatusReturnLevel = uint8(val);
        end
        function set.RegisteredInstruction(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'RegisteredInstruction');
            obj.RegisteredInstruction = uint8(val);
        end
        function set.HardwareErrorStatus(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'HardwareErrorStatus');
            obj.HardwareErrorStatus = uint8(val);
        end
        function set.VelocityIGain(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'VelocityIGain');
            obj.VelocityIGain = uint16(val);
        end
        function set.VelocityPGain(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'VelocityPGain');
            obj.VelocityPGain = uint16(val);
        end
        function set.PositionDGain(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'PositionDGain');
            obj.PositionDGain = uint16(val);
        end
        function set.PositionIGain(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'PositionIGain');
            obj.PositionIGain = uint16(val);
        end
        function set.PositionPGain(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'PositionPGain');
            obj.PositionPGain = uint16(val);
        end
        function set.Feedforward2ndGain(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'Feedforward2ndGain');
            obj.Feedforward2ndGain = uint16(val);
        end
        function set.Feedforward1stGain(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'Feedforward1stGain');
            obj.Feedforward1stGain = uint16(val);
        end
        function set.BusWatchdog(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'BusWatchdog');
            obj.BusWatchdog = uint8(val);
        end
        function set.GoalPWM(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'GoalPWM');
            obj.GoalPWM = int16(val);
        end
        function set.GoalCurrent(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'GoalCurrent');
            obj.GoalCurrent = int16(val);
        end
        function set.GoalVelocity(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'GoalVelocity');
            obj.GoalVelocity = int32(val);
        end
        function set.ProfileAcceleration(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'ProfileAcceleration');
            obj.ProfileAcceleration = uint32(val);
        end
        function set.ProfileVelocity(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'ProfileVelocity');
            obj.ProfileVelocity = uint32(val);
        end
        function set.GoalPosition(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'GoalPosition');
            obj.GoalPosition = uint32(val);
        end
        function set.RealtimeTick(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'RealtimeTick');
            obj.RealtimeTick = uint16(val);
        end
        function set.Moving(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'Moving');
            obj.Moving = uint8(val);
        end
        function set.MovingStatus(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'MovingStatus');
            obj.MovingStatus = uint8(val);
        end
        function set.PresentPWM(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'PresentPWM');
            obj.PresentPWM = int16(val);
        end
        function set.PresentCurrent(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'PresentCurrent');
            obj.PresentCurrent = int16(val);
        end
        function set.PresentVelocity(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'PresentVelocity');
            obj.PresentVelocity = int32(val);
        end
        function set.PresentPosition(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'PresentPosition');
            obj.PresentPosition = int32(val);
        end
        function set.VelocityTrajectory(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'VelocityTrajectory');
            obj.VelocityTrajectory = uint32(val);
        end
        function set.PositionTrajectory(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'PositionTrajectory');
            obj.PositionTrajectory = uint32(val);
        end
        function set.PresentInputVoltage(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'PresentInputVoltage');
            obj.PresentInputVoltage = uint16(val);
        end
        function set.PresentTemperature(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MX2Ext', 'PresentTemperature');
            obj.PresentTemperature = uint8(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.dynamixel_workbench_msgs.MX2Ext.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.dynamixel_workbench_msgs.MX2Ext;
            obj.reload(strObj);
        end
    end
end
