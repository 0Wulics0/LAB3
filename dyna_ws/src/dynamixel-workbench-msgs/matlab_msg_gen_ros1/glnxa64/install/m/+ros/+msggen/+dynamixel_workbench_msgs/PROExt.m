
classdef PROExt < ros.Message
    %PROExt MATLAB implementation of dynamixel_workbench_msgs/PROExt
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'dynamixel_workbench_msgs/PROExt' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '7e5c32f4e1d1adb95d72d66d5dcec77e' % The MD5 Checksum of the message definition
        PropertyList = { 'ModelNumber' 'FirmwareVersion' 'ID' 'BaudRate' 'ReturnDelayTime' 'OperatingMode' 'HomingOffset' 'MovingThreshold' 'TemperatureLimit' 'MaxVoltageLimit' 'MinVoltageLimit' 'AccelerationLimit' 'TorqueLimit' 'VelocityLimit' 'MaxPositionLimit' 'MinPositionLimit' 'ExternalPortMode1' 'ExternalPortMode2' 'ExternalPortMode3' 'ExternalPortMode4' 'Shutdown' 'TorqueEnable' 'LEDRED' 'LEDGREEN' 'LEDBLUE' 'VelocityIGain' 'VelocityPGain' 'PositionPGain' 'GoalPosition' 'GoalVelocity' 'GoalTorque' 'GoalAcceleration' 'Moving' 'PresentPosition' 'PresentVelocity' 'PresentCurrent' 'PresentInputVoltage' 'PresentTemperature' 'RegisteredInstruction' 'StatusReturnLevel' 'HardwareErrorStatus' } % List of non-constant message properties
        ROSPropertyList = { 'Model_Number' 'Firmware_Version' 'ID' 'Baud_Rate' 'Return_Delay_Time' 'Operating_Mode' 'Homing_Offset' 'Moving_Threshold' 'Temperature_Limit' 'Max_Voltage_Limit' 'Min_Voltage_Limit' 'Acceleration_Limit' 'Torque_Limit' 'Velocity_Limit' 'Max_Position_Limit' 'Min_Position_Limit' 'External_Port_Mode_1' 'External_Port_Mode_2' 'External_Port_Mode_3' 'External_Port_Mode_4' 'Shutdown' 'Torque_Enable' 'LED_RED' 'LED_GREEN' 'LED_BLUE' 'Velocity_I_Gain' 'Velocity_P_Gain' 'Position_P_Gain' 'Goal_Position' 'Goal_Velocity' 'Goal_Torque' 'Goal_Acceleration' 'Moving' 'Present_Position' 'Present_Velocity' 'Present_Current' 'Present_Input_Voltage' 'Present_Temperature' 'Registered_Instruction' 'Status_Return_Level' 'Hardware_Error_Status' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        ModelNumber
        FirmwareVersion
        ID
        BaudRate
        ReturnDelayTime
        OperatingMode
        HomingOffset
        MovingThreshold
        TemperatureLimit
        MaxVoltageLimit
        MinVoltageLimit
        AccelerationLimit
        TorqueLimit
        VelocityLimit
        MaxPositionLimit
        MinPositionLimit
        ExternalPortMode1
        ExternalPortMode2
        ExternalPortMode3
        ExternalPortMode4
        Shutdown
        TorqueEnable
        LEDRED
        LEDGREEN
        LEDBLUE
        VelocityIGain
        VelocityPGain
        PositionPGain
        GoalPosition
        GoalVelocity
        GoalTorque
        GoalAcceleration
        Moving
        PresentPosition
        PresentVelocity
        PresentCurrent
        PresentInputVoltage
        PresentTemperature
        RegisteredInstruction
        StatusReturnLevel
        HardwareErrorStatus
    end
    methods
        function set.ModelNumber(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'ModelNumber');
            obj.ModelNumber = uint16(val);
        end
        function set.FirmwareVersion(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'FirmwareVersion');
            obj.FirmwareVersion = uint8(val);
        end
        function set.ID(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'ID');
            obj.ID = uint8(val);
        end
        function set.BaudRate(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'BaudRate');
            obj.BaudRate = uint8(val);
        end
        function set.ReturnDelayTime(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'ReturnDelayTime');
            obj.ReturnDelayTime = uint8(val);
        end
        function set.OperatingMode(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'OperatingMode');
            obj.OperatingMode = uint8(val);
        end
        function set.HomingOffset(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'HomingOffset');
            obj.HomingOffset = int32(val);
        end
        function set.MovingThreshold(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'MovingThreshold');
            obj.MovingThreshold = uint32(val);
        end
        function set.TemperatureLimit(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'TemperatureLimit');
            obj.TemperatureLimit = uint8(val);
        end
        function set.MaxVoltageLimit(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'MaxVoltageLimit');
            obj.MaxVoltageLimit = uint16(val);
        end
        function set.MinVoltageLimit(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'MinVoltageLimit');
            obj.MinVoltageLimit = uint16(val);
        end
        function set.AccelerationLimit(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'AccelerationLimit');
            obj.AccelerationLimit = uint32(val);
        end
        function set.TorqueLimit(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'TorqueLimit');
            obj.TorqueLimit = uint16(val);
        end
        function set.VelocityLimit(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'VelocityLimit');
            obj.VelocityLimit = uint32(val);
        end
        function set.MaxPositionLimit(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'MaxPositionLimit');
            obj.MaxPositionLimit = int32(val);
        end
        function set.MinPositionLimit(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'MinPositionLimit');
            obj.MinPositionLimit = int32(val);
        end
        function set.ExternalPortMode1(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'ExternalPortMode1');
            obj.ExternalPortMode1 = uint8(val);
        end
        function set.ExternalPortMode2(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'ExternalPortMode2');
            obj.ExternalPortMode2 = uint8(val);
        end
        function set.ExternalPortMode3(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'ExternalPortMode3');
            obj.ExternalPortMode3 = uint8(val);
        end
        function set.ExternalPortMode4(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'ExternalPortMode4');
            obj.ExternalPortMode4 = uint8(val);
        end
        function set.Shutdown(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'Shutdown');
            obj.Shutdown = uint8(val);
        end
        function set.TorqueEnable(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'TorqueEnable');
            obj.TorqueEnable = uint8(val);
        end
        function set.LEDRED(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'LEDRED');
            obj.LEDRED = uint8(val);
        end
        function set.LEDGREEN(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'LEDGREEN');
            obj.LEDGREEN = uint8(val);
        end
        function set.LEDBLUE(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'LEDBLUE');
            obj.LEDBLUE = uint8(val);
        end
        function set.VelocityIGain(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'VelocityIGain');
            obj.VelocityIGain = uint16(val);
        end
        function set.VelocityPGain(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'VelocityPGain');
            obj.VelocityPGain = uint16(val);
        end
        function set.PositionPGain(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'PositionPGain');
            obj.PositionPGain = uint16(val);
        end
        function set.GoalPosition(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'GoalPosition');
            obj.GoalPosition = int32(val);
        end
        function set.GoalVelocity(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'GoalVelocity');
            obj.GoalVelocity = uint32(val);
        end
        function set.GoalTorque(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'GoalTorque');
            obj.GoalTorque = uint16(val);
        end
        function set.GoalAcceleration(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'GoalAcceleration');
            obj.GoalAcceleration = int32(val);
        end
        function set.Moving(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'Moving');
            obj.Moving = uint8(val);
        end
        function set.PresentPosition(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'PresentPosition');
            obj.PresentPosition = int32(val);
        end
        function set.PresentVelocity(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'PresentVelocity');
            obj.PresentVelocity = uint32(val);
        end
        function set.PresentCurrent(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'PresentCurrent');
            obj.PresentCurrent = uint16(val);
        end
        function set.PresentInputVoltage(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'PresentInputVoltage');
            obj.PresentInputVoltage = uint16(val);
        end
        function set.PresentTemperature(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'PresentTemperature');
            obj.PresentTemperature = uint8(val);
        end
        function set.RegisteredInstruction(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'RegisteredInstruction');
            obj.RegisteredInstruction = uint8(val);
        end
        function set.StatusReturnLevel(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'StatusReturnLevel');
            obj.StatusReturnLevel = uint8(val);
        end
        function set.HardwareErrorStatus(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PROExt', 'HardwareErrorStatus');
            obj.HardwareErrorStatus = uint8(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.dynamixel_workbench_msgs.PROExt.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.dynamixel_workbench_msgs.PROExt;
            obj.reload(strObj);
        end
    end
end
