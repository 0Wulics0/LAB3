
classdef AX < ros.Message
    %AX MATLAB implementation of dynamixel_workbench_msgs/AX
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'dynamixel_workbench_msgs/AX' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '2995886198dd0136a45c431a45ec13b2' % The MD5 Checksum of the message definition
        PropertyList = { 'ModelNumber' 'FirmwareVersion' 'ID' 'BaudRate' 'ReturnDelayTime' 'CWAngleLimit' 'CCWAngleLimit' 'TemperatureLimit' 'MinVoltageLimit' 'MaxVoltageLimit' 'MaxTorque' 'StatusReturnLevel' 'AlarmLED' 'Shutdown' 'TorqueEnable' 'LED' 'CWComplianceMargin' 'CCWComplianceMargin' 'CWComplianceSlope' 'CCWComplianceSlope' 'GoalPosition' 'MovingSpeed' 'TorqueLimit' 'PresentPosition' 'PresentSpeed' 'PresentLoad' 'PresentVoltage' 'PresentTemperature' 'Registered' 'Moving' 'Lock' 'Punch' } % List of non-constant message properties
        ROSPropertyList = { 'Model_Number' 'Firmware_Version' 'ID' 'Baud_Rate' 'Return_Delay_Time' 'CW_Angle_Limit' 'CCW_Angle_Limit' 'Temperature_Limit' 'Min_Voltage_Limit' 'Max_Voltage_Limit' 'Max_Torque' 'Status_Return_Level' 'Alarm_LED' 'Shutdown' 'Torque_Enable' 'LED' 'CW_Compliance_Margin' 'CCW_Compliance_Margin' 'CW_Compliance_Slope' 'CCW_Compliance_Slope' 'Goal_Position' 'Moving_Speed' 'Torque_Limit' 'Present_Position' 'Present_Speed' 'Present_Load' 'Present_Voltage' 'Present_Temperature' 'Registered' 'Moving' 'Lock' 'Punch' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        ModelNumber
        FirmwareVersion
        ID
        BaudRate
        ReturnDelayTime
        CWAngleLimit
        CCWAngleLimit
        TemperatureLimit
        MinVoltageLimit
        MaxVoltageLimit
        MaxTorque
        StatusReturnLevel
        AlarmLED
        Shutdown
        TorqueEnable
        LED
        CWComplianceMargin
        CCWComplianceMargin
        CWComplianceSlope
        CCWComplianceSlope
        GoalPosition
        MovingSpeed
        TorqueLimit
        PresentPosition
        PresentSpeed
        PresentLoad
        PresentVoltage
        PresentTemperature
        Registered
        Moving
        Lock
        Punch
    end
    methods
        function set.ModelNumber(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AX', 'ModelNumber');
            obj.ModelNumber = uint16(val);
        end
        function set.FirmwareVersion(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AX', 'FirmwareVersion');
            obj.FirmwareVersion = uint8(val);
        end
        function set.ID(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AX', 'ID');
            obj.ID = uint8(val);
        end
        function set.BaudRate(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AX', 'BaudRate');
            obj.BaudRate = uint8(val);
        end
        function set.ReturnDelayTime(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AX', 'ReturnDelayTime');
            obj.ReturnDelayTime = uint8(val);
        end
        function set.CWAngleLimit(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AX', 'CWAngleLimit');
            obj.CWAngleLimit = uint16(val);
        end
        function set.CCWAngleLimit(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AX', 'CCWAngleLimit');
            obj.CCWAngleLimit = uint16(val);
        end
        function set.TemperatureLimit(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AX', 'TemperatureLimit');
            obj.TemperatureLimit = uint8(val);
        end
        function set.MinVoltageLimit(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AX', 'MinVoltageLimit');
            obj.MinVoltageLimit = uint8(val);
        end
        function set.MaxVoltageLimit(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AX', 'MaxVoltageLimit');
            obj.MaxVoltageLimit = uint8(val);
        end
        function set.MaxTorque(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AX', 'MaxTorque');
            obj.MaxTorque = uint16(val);
        end
        function set.StatusReturnLevel(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AX', 'StatusReturnLevel');
            obj.StatusReturnLevel = uint8(val);
        end
        function set.AlarmLED(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AX', 'AlarmLED');
            obj.AlarmLED = uint8(val);
        end
        function set.Shutdown(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AX', 'Shutdown');
            obj.Shutdown = uint8(val);
        end
        function set.TorqueEnable(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AX', 'TorqueEnable');
            obj.TorqueEnable = uint8(val);
        end
        function set.LED(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AX', 'LED');
            obj.LED = uint8(val);
        end
        function set.CWComplianceMargin(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AX', 'CWComplianceMargin');
            obj.CWComplianceMargin = uint8(val);
        end
        function set.CCWComplianceMargin(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AX', 'CCWComplianceMargin');
            obj.CCWComplianceMargin = uint8(val);
        end
        function set.CWComplianceSlope(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AX', 'CWComplianceSlope');
            obj.CWComplianceSlope = uint8(val);
        end
        function set.CCWComplianceSlope(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AX', 'CCWComplianceSlope');
            obj.CCWComplianceSlope = uint8(val);
        end
        function set.GoalPosition(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AX', 'GoalPosition');
            obj.GoalPosition = uint16(val);
        end
        function set.MovingSpeed(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AX', 'MovingSpeed');
            obj.MovingSpeed = uint16(val);
        end
        function set.TorqueLimit(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AX', 'TorqueLimit');
            obj.TorqueLimit = uint16(val);
        end
        function set.PresentPosition(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AX', 'PresentPosition');
            obj.PresentPosition = uint16(val);
        end
        function set.PresentSpeed(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AX', 'PresentSpeed');
            obj.PresentSpeed = uint16(val);
        end
        function set.PresentLoad(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AX', 'PresentLoad');
            obj.PresentLoad = uint16(val);
        end
        function set.PresentVoltage(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AX', 'PresentVoltage');
            obj.PresentVoltage = uint8(val);
        end
        function set.PresentTemperature(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AX', 'PresentTemperature');
            obj.PresentTemperature = uint8(val);
        end
        function set.Registered(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AX', 'Registered');
            obj.Registered = uint8(val);
        end
        function set.Moving(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AX', 'Moving');
            obj.Moving = uint8(val);
        end
        function set.Lock(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AX', 'Lock');
            obj.Lock = uint8(val);
        end
        function set.Punch(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AX', 'Punch');
            obj.Punch = uint16(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.dynamixel_workbench_msgs.AX.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.dynamixel_workbench_msgs.AX;
            obj.reload(strObj);
        end
    end
end
